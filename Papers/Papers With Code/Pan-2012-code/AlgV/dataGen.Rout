
R version 2.11.1 (2010-05-31)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

>  ##First read in the arguments listed at the command line
>  args=(commandArgs(TRUE))
>  
>  ##args is now a list of character vectors
>  ## First check to see if arguments are passed.
>  ## Then cycle through each element of the list and evaluate the expressions.
>  if(length(args)==0){
+      print("No arguments supplied.")
+      ##supply default values
+      sim = 1
+ 	 setup = 1
+ 	 small = 1
+ 	 gamma0 = 0
+  }else{
+      for(i in 1:length(args)){
+           eval(parse(text=args[[i]]))
+      }
+  }
>  sim
[1] 100
>  setup
[1] 5
>  small
[1] 0
>  set.seed(sim)
>  
>  source("netreg1.2.R")
>  
>  ##generate simulated data
>  
>  # number of records
>  gamma0<-0
>  Ntr<-50
>  Ntu<-50
>  Nts<-200
>  
>  # number of true factors
>  if (small==1) {
+    nTF<-3
+  } else {
+    nTF<-10
+  }
>  
>  # number of target genes
>  nTarget<-10
>  
>  # generate the netwok information
>  netwk<-matrix(0,nTF*nTarget,2)
>  for(i in 1:nTF) {
+  	for(j in 1:nTarget) {
+  		netwk[(i-1)*nTarget+j,1] = (i-1)*(nTarget+1)+1
+  		netwk[(i-1)*nTarget+j,2] = (i-1)*(nTarget+1)+1+j
+  	}
+  }
>  
>  ## true betas:
>  
>  if (setup==1 & small==1) {
+  b<-c(5, rep(5/sqrt(nTarget),nTarget), -3, rep(-3/sqrt(nTarget),nTarget),
+       rep(0, (nTarget+1)*(nTF-2)) )
+  } else if (setup==2 & small==1) {
+  # setup2-small: nTF=3, nTarget=10
+  b<-c(5, rep(-5/sqrt(10),3), rep(5/sqrt(10),7), -3, rep(3/sqrt(10),3), rep(-3/sqrt(10),7),
+       rep(0, (nTarget+1)*(nTF-2)) )
+  } else if  (setup==3 & small==1) {
+  # setup3-small: nTF=3, nTarget=10
+  b<-c(5, rep(5/sqrt(10),10), -3, rep(-3/10,10),
+       rep(0, (nTarget+1)*(nTF-2)) )
+  } else if (setup==4 & small==1) {
+  # setup4-small: nTF=3, nTarget=10
+  b<-c(5, rep(-5/sqrt(10),3), rep(5/sqrt(10),7), -3, rep(3/10,3), rep(-3/10,7),
+       rep(0, (nTarget+1)*(nTF-2)) )
+  } else if (setup==5 & small==1) {
+  # setup5-small: nTF=3, nTarget=10
+  b<-c(5, rep(0,5), rep(5/sqrt(10),5), -3, rep(0,5), rep(-3/sqrt(10),5),
+       rep(0, (nTarget+1)*(nTF-2)) )
+  } else if (setup==1 & small==0) {
+  # setup1-big: nTF=10, nTarget=10
+  b<-c(5, rep(5/sqrt(10),10), -5, rep(-5/sqrt(10),10),
+       3, rep(3/sqrt(10),10), -3, rep(-3/sqrt(10),10),
+       rep(0, (nTarget+1)*(nTF-4)) )
+  } else if (setup==2 & small==0) {
+  # setup2-big: nTF=10, nTarget=10
+  b<-c(5, rep(-5/sqrt(10),3), rep(5/sqrt(10),7), -5, rep(5/sqrt(10),3), rep(-5/sqrt(10),7),
+       3, rep(-3/sqrt(10),3), rep(3/sqrt(10),7), -3, rep(3/sqrt(10),3), rep(-3/sqrt(10),7),
+       rep(0, (nTarget+1)*(nTF-4)) )
+  } else if (setup==3 & small==0) {
+  # setup3-big: nTF=10, nTarget=10
+  b<-c(5, rep(5/sqrt(10),10), -5, rep(-5/10,10),
+       3, rep(3/sqrt(10),10), -3, rep(-3/10,10),
+       rep(0, (nTarget+1)*(nTF-4)) )
+  } else if (setup==4 & small==0) {
+  # setup4-big: nTF=10, nTarget=10
+  b<-c(5, rep(-5/sqrt(10),3), rep(5/sqrt(10),7), -5, rep(5/10,3), rep(-5/10,7),
+       3, rep(-3/sqrt(10),3), rep(3/sqrt(10),7), -3, rep(3/10,3), rep(-3/10,7),
+       rep(0, (nTarget+1)*(nTF-4)) )
+  } else { # setup==5 & small==0
+  # setup5-big: nTF=10, nTarget=10
+  b<-c(5, rep(0,5), rep(5/sqrt(10),5), -5, rep(0,5), rep(-5/sqrt(10),5),
+       3, rep(0,5), rep(3/sqrt(10),5), -3, rep(0,5), rep(-3/sqrt(10),5),
+       rep(0, (nTarget+1)*(nTF-4)) )
+  }
>  #b<-c(5, rep(5/sqrt(10),nTarget), -3, rep(-3/sqrt(10),nTarget),
>  #     rep(0, (nTarget+1)*(nTF-2)) )
> 
>  Ve<-sum(b*b)/2
>  
>  # training data
>  Ytr<-rep(0, Ntr)
>  Xtr<-matrix(0, nrow=nTF*(nTarget+1), ncol=Ntr)
>  
>  j<-1
>  for(i in 1:nTF){
+    Xtr[j,]<-rnorm(Ntr, 0, 1)
+    j<-j+1
+    for(k in 1:nTarget){
+      Xtr[j,]<-rnorm(Ntr, 0.7*Xtr[(i-1)*(nTarget+1)+1,], sqrt(0.51))
+      j<-j+1
+      }
+    }
>  Ytr<-rnorm(Ntr, 0, sqrt(Ve)) + apply(Xtr, 2, Xb, b)
>  
>  # tuning data
>  Ytu<-rep(0, Ntu)
>  Xtu<-matrix(0, nrow=nTF*(nTarget+1), ncol=Ntu)
>  
>  j<-1
>  for(i in 1:nTF){
+    Xtu[j,]<-rnorm(Ntu, 0, 1)
+    j<-j+1
+    for(k in 1:nTarget){
+      Xtu[j,]<-rnorm(Ntu, 0.7*Xtu[(i-1)*(nTarget+1)+1,], sqrt(0.51))
+      j<-j+1
+      }
+    }
>  Ytu<-rnorm(Ntu, 0, sqrt(Ve)) + apply(Xtu, 2, Xb, b)
>  
>  # testing data
>  Yts<-rep(0, Nts)
>  Xts<-matrix(0, nrow=nTF*(nTarget+1), ncol=Nts)
>  
>  j<-1
>  for(i in 1:nTF){
+    Xts[j,]<-rnorm(Nts, 0, 1)
+    j<-j+1
+    for(k in 1:nTarget){
+      Xts[j,]<-rnorm(Nts, 0.7*Xts[(i-1)*(nTarget+1)+1,], sqrt(0.51))
+      j<-j+1
+      }
+    }
>  Yts<-rnorm(Nts, 0, sqrt(Ve)) + apply(Xts, 2, Xb, b)
>  
> # normalize data
>  Xmu<-apply(Xtr, 1, mean)
>  Xsd<-sqrt(apply(Xtr, 1, var))
> 
>  Yts<-Yts - mean(Ytr)
>  for(i in 1:length(Xmu))
+    Xts[i,]<-( Xts[i,] - Xmu[i])/Xsd[i]
>  Xts<-t(Xts)
> 
>  Ytu<-Ytu - mean(Ytr)
>  for(i in 1:length(Xmu))
+    Xtu[i,]<-( Xtu[i,] - Xmu[i])/Xsd[i]
>  Xtu<-t(Xtu)
>  
>  Ytr<-Ytr - mean(Ytr)
>  for(i in 1:length(Xmu))
+    Xtr[i,]<-( Xtr[i,] - Xmu[i])/Xsd[i]
>  Xtr<-t(Xtr)
>  
>  # weights
>  wt<-rep(c(nTarget, rep(1, nTarget)), nTF)^((gamma0+1)/2) # wt = (d_i)^((gamma0+1)/2) ==> w_i = d_i^(1/2)
>  wtinf<-rep(c(nTarget, rep(1, nTarget)), nTF)^(0.5) # wt = (d_i)^((gamma0+1)/2) ==> w_i = d_i^(1/2)
>  #wt<-rep(c(nTarget, rep(1, nTarget)), nTF) # wt = d_i^gamma0 ==> w_i = d_i
>  #wt<-rep(1, (nTarget+1)*nTF) # wt = d_i ==> w_i = 1
>  
>  write.table(Ytr, "Ytr.txt", sep = " ", col.names = F, row.names = F)
>  write.table(Xtr, "Xtr.txt", sep = " ", col.names = F, row.names = F)
>  write.table(Ytu, "Ytu.txt", sep = " ", col.names = F, row.names = F)
>  write.table(Xtu, "Xtu.txt", sep = " ", col.names = F, row.names = F)
>  write.table(Yts, "Yts.txt", sep = " ", col.names = F, row.names = F)
>  write.table(Xts, "Xts.txt", sep = " ", col.names = F, row.names = F)
>  write.table(b, "b.txt", sep = " ", col.names = F, row.names = F)
>  write.table(netwk, "networkConf.txt", sep = " ", col.names = F, row.names = F)
>  write.table(wt, "wt.txt", sep = " ", col.names = F, row.names = F)
>  write.table(wtinf, "wtinf.txt", sep = " ", col.names = F, row.names = F)
>  write.table(Xsd, "Xsd.txt", sep = " ", col.names = F, row.names = F)
> 
> proc.time()
   user  system elapsed 
  0.465   0.033   0.484 
