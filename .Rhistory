j<-1
for(i in 1:nTF){
Xtr[j,]<-rnorm(Ntr, 0, 1)
j<-j+1
for(k in 1:nTarget){
Xtr[j,]<-rnorm(Ntr, 0.7*Xtr[(i-1)*(nTarget+1)+1,], sqrt(0.51))
j<-j+1
}
}
Ytr<-rnorm(Ntr, 0, sqrt(Ve)) + apply(Xtr, 2, Xb, b)
Ytu<-rep(0, Ntu)
Xtu<-matrix(0, nrow=nTF*(nTarget+1), ncol=Ntu)
j<-1
for(i in 1:nTF){
Xtu[j,]<-rnorm(Ntu, 0, 1)
j<-j+1
for(k in 1:nTarget){
Xtu[j,]<-rnorm(Ntu, 0.7*Xtu[(i-1)*(nTarget+1)+1,], sqrt(0.51))
j<-j+1
}
}
Ytu<-rnorm(Ntu, 0, sqrt(Ve)) + apply(Xtu, 2, Xb, b)
Yts<-rep(0, Nts)
Xts<-matrix(0, nrow=nTF*(nTarget+1), ncol=Nts)
j<-1
for(i in 1:nTF){
Xts[j,]<-rnorm(Nts, 0, 1)
j<-j+1
for(k in 1:nTarget){
Xts[j,]<-rnorm(Nts, 0.7*Xts[(i-1)*(nTarget+1)+1,], sqrt(0.51))
j<-j+1
}
}
Yts<-rnorm(Nts, 0, sqrt(Ve)) + apply(Xts, 2, Xb, b)
View(Xtr)
View(Xtr)
View(Xtr)
Xmu<-apply(Xtr, 1, mean)
Xmu<-apply(X, 2, mean)
Xsd<-sqrt(apply(X, 2, var))
length(X)
Xmu<-apply(X, 2, mean)
Xsd<-sqrt(apply(X, 2, var))
for(i in 1:length(X)){
X[,i] = (X[,i] - Xmu[i])/Xsd[i]
}
mean(X[500])
mean(as.numeric(X[500]))
mean(as.numeric(X[500,]))
mean(as.numeric(X[,500]))
Y = Y - mean(Y)
length(Y)
for(i in 1:length(Y)){
Y[,i] = Y[,i] - mean(Y[,i])
}
X = generateExpressionLevelsFrame(n = 100, transFactorsCount = 200, regulatedGenesPerTF = 10)
Y = data.frame(cbind(simulateResponseValues(X, betas[1,]), simulateResponseValues(X, betas[2,]),
simulateResponseValues(X, betas[3,]), simulateResponseValues(X, betas[4,])))
generateBetaVector = function(TF1, TF2, TF3, TF4, denominator, negative, positive, unrelatedTransFactorCount){
EL1 = c(TF1, rep(-TF1/denominator, negative), rep(TF1/denominator, positive))
EL2 = c(TF2, rep(-TF2/denominator, negative), rep(TF2/denominator, positive))
EL3 = c(TF3, rep(-TF3/denominator, negative), rep(TF3/denominator, positive))
EL4 = c(TF4, rep(-TF4/denominator, negative), rep(TF4/denominator, positive))
ELU = rep(0, unrelatedTransFactorCount*(1+positive+negative))
return(c(EL1, EL2, EL3, EL4, ELU))
}
createBetaFrame = function(){
M1 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = sqrt(10), negative = 0, positive = 10, unrelatedTransFactorCount = 196)
M2 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = sqrt(10), negative = 3, positive = 7, unrelatedTransFactorCount = 196)
M3 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = 10, negative = 0, positive = 10, unrelatedTransFactorCount = 196)
M4 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = 10, negative = 3, positive = 7, unrelatedTransFactorCount = 196)
betas = data.frame(rbind(M1,M2,M3,M4))
return(betas)
}
generateExpressionLevels = function(transFactorsCount, regulatedGenesPerTF){
TF = rnorm(n = transFactorsCount, mean = 0, sd = 1)
expressionLevels = c()
for(i in 1:length(TF)){
expressionLevels = c(expressionLevels, TF[i], rnorm(regulatedGenesPerTF, 0.7*TF[i], 0.51)) # sqrt(0.51)
}
return(expressionLevels)
}
generateExpressionLevelsFrame = function(n, transFactorsCount, regulatedGenesPerTF){
expressionLevelsFrame = c()
for(i in 1:n){
expressionLevelsFrame = rbind(expressionLevelsFrame, generateExpressionLevels(transFactorsCount, regulatedGenesPerTF))
}
return(data.frame(expressionLevelsFrame))
}
simulateResponseValues = function(X, betas){
betas = as.numeric(betas)
noiseVar = sum((betas-mean(betas))^2)/4 # 2?
noise = rnorm(nrow(X), mean = 0, sd = sqrt(noiseVar))
weighedX = sweep(x = X, 2, betas, "*")
sumWeighedX = rowSums(weighedX)
Y = sumWeighedX + noise
return(Y)
}
generateNetwork = function(transFactorsCount, regulatedGenesPerTF){
network = matrix(0, transFactorsCount * regulatedGenesPerTF, 2)
for(i in 0:transFactorsCount-1){
for(j in 1:regulatedGenesPerTF){
network[i * regulatedGenesPerTF + j, 1] = i * (regulatedGenesPerTF + 1) + 1
network[i * regulatedGenesPerTF + j, 2] = i * (regulatedGenesPerTF + 1) + j + 1
}
}
return(network)
}
normalize = function(X, Y){
}
betas = createBetaFrame()
network = generateNetwork(transFactorsCount = 200, regulatedGenesPerTF = 10)
X = generateExpressionLevelsFrame(n = 100, transFactorsCount = 200, regulatedGenesPerTF = 10)
Y = data.frame(cbind(simulateResponseValues(X, betas[1,]), simulateResponseValues(X, betas[2,]),
simulateResponseValues(X, betas[3,]), simulateResponseValues(X, betas[4,])))
View(X)
View(Y)
Xmu<-apply(X, 2, mean)
Xsd<-sqrt(apply(X, 2, var))
for(i in 1:length(X)){
X[,i] = (X[,i] - Xmu[i])/Xsd[i]
}
for(i in 1:length(Y)){
Y[,i] = Y[,i] - mean(Y[,i])
}
View(X)
View(Y)
Y = data.frame(cbind(simulateResponseValues(X, betas[1,]), simulateResponseValues(X, betas[2,]),
simulateResponseValues(X, betas[3,]), simulateResponseValues(X, betas[4,])))
for(i in 1:length(Y)){
Y[,i] = Y[,i] - mean(Y[,i])
}
View(Y)
normalize = function(X, Y){
Xmu<-apply(X, 2, mean)
Xsd<-sqrt(apply(X, 2, var))
for(i in 1:length(X)){
X[,i] = (X[,i] - Xmu[i])/Xsd[i]
}
for(i in 1:length(Y)){
Y[,i] = Y[,i] - mean(Y[,i])
}
return(c(X,Y))
}
normalized = normalize(X,Y)
normalize = function(X, Y){
Xmu<-apply(X, 2, mean)
Xsd<-sqrt(apply(X, 2, var))
for(i in 1:length(X)){
X[,i] = (X[,i] - Xmu[i])/Xsd[i]
}
for(i in 1:length(Y)){
Y[,i] = Y[,i] - mean(Y[,i])
}
return(c(x = X, y = Y))
}
normalized = normalize(X,Y)
X = normalized.x
normalize = function(X, Y){
Xmu<-apply(X, 2, mean)
Xsd<-sqrt(apply(X, 2, var))
for(i in 1:length(X)){
X[,i] = (X[,i] - Xmu[i])/Xsd[i]
}
for(i in 1:length(Y)){
Y[,i] = Y[,i] - mean(Y[,i])
}
result = c()
result.x = X
result.y = Y
return(result)
}
betas = createBetaFrame()
network = generateNetwork(transFactorsCount = 200, regulatedGenesPerTF = 10)
X = generateExpressionLevelsFrame(n = 100, transFactorsCount = 200, regulatedGenesPerTF = 10)
Y = data.frame(cbind(simulateResponseValues(X, betas[1,]), simulateResponseValues(X, betas[2,]),
simulateResponseValues(X, betas[3,]), simulateResponseValues(X, betas[4,])))
normalized = normalize(X,Y)
X = normalized.x
normalized = normalize(X,Y)
normalize = function(X, Y){
Xmu<-apply(X, 2, mean)
Xsd<-sqrt(apply(X, 2, var))
for(i in 1:length(X)){
X[,i] = (X[,i] - Xmu[i])/Xsd[i]
}
for(i in 1:length(Y)){
Y[,i] = Y[,i] - mean(Y[,i])
}
result = c()
result.x = X
result.y = Y
return(X)
}
normalized = normalize(X,Y)
normalize = function(X, Y){
Xmu<-apply(X, 2, mean)
Xsd<-sqrt(apply(X, 2, var))
for(i in 1:length(X)){
X[,i] = (X[,i] - Xmu[i])/Xsd[i]
}
for(i in 1:length(Y)){
Y[,i] = Y[,i] - mean(Y[,i])
}
return(list(x = X, y = Y))
}
betas = createBetaFrame()
network = generateNetwork(transFactorsCount = 200, regulatedGenesPerTF = 10)
X = generateExpressionLevelsFrame(n = 100, transFactorsCount = 200, regulatedGenesPerTF = 10)
Y = data.frame(cbind(simulateResponseValues(X, betas[1,]), simulateResponseValues(X, betas[2,]),
simulateResponseValues(X, betas[3,]), simulateResponseValues(X, betas[4,])))
normalized = normalize(X,Y)
X = normalized.x
X = normalized[[x]]
X = normalized[["x"]]
Y = normalized[2]
Y = normalized[[2]]
X = normalized[[1]]
generateAndNormalize = function(n, transFactorCount, regulatedGenesPerTF){
betas = createBetaFrame()
network = generateNetwork(transFactorsCount, regulatedGenesPerTF)
X = generateExpressionLevelsFrame(n, transFactorsCount, regulatedGenesPerTF)
Y = data.frame(cbind(simulateResponseValues(X, betas[1,]), simulateResponseValues(X, betas[2,]),
simulateResponseValues(X, betas[3,]), simulateResponseValues(X, betas[4,])))
normalized = normalize(X, Y)
return(list(x = normalized[[1]], y = normalized[[2]], net = network))
}
generateBetaVector = function(TF1, TF2, TF3, TF4, denominator, negative, positive, unrelatedTransFactorCount){
EL1 = c(TF1, rep(-TF1/denominator, negative), rep(TF1/denominator, positive))
EL2 = c(TF2, rep(-TF2/denominator, negative), rep(TF2/denominator, positive))
EL3 = c(TF3, rep(-TF3/denominator, negative), rep(TF3/denominator, positive))
EL4 = c(TF4, rep(-TF4/denominator, negative), rep(TF4/denominator, positive))
ELU = rep(0, unrelatedTransFactorCount*(1+positive+negative))
return(c(EL1, EL2, EL3, EL4, ELU))
}
createBetaFrame = function(){
M1 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = sqrt(10), negative = 0, positive = 10, unrelatedTransFactorCount = 196)
M2 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = sqrt(10), negative = 3, positive = 7, unrelatedTransFactorCount = 196)
M3 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = 10, negative = 0, positive = 10, unrelatedTransFactorCount = 196)
M4 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = 10, negative = 3, positive = 7, unrelatedTransFactorCount = 196)
betas = data.frame(rbind(M1,M2,M3,M4))
return(betas)
}
generateExpressionLevels = function(transFactorsCount, regulatedGenesPerTF){
TF = rnorm(n = transFactorsCount, mean = 0, sd = 1)
expressionLevels = c()
for(i in 1:length(TF)){
expressionLevels = c(expressionLevels, TF[i], rnorm(regulatedGenesPerTF, 0.7*TF[i], 0.51)) # sqrt(0.51)
}
return(expressionLevels)
}
generateExpressionLevelsFrame = function(n, transFactorsCount, regulatedGenesPerTF){
expressionLevelsFrame = c()
for(i in 1:n){
expressionLevelsFrame = rbind(expressionLevelsFrame, generateExpressionLevels(transFactorsCount, regulatedGenesPerTF))
}
return(data.frame(expressionLevelsFrame))
}
simulateResponseValues = function(X, betas){
betas = as.numeric(betas)
noiseVar = sum((betas-mean(betas))^2)/4 # 2?
noise = rnorm(nrow(X), mean = 0, sd = sqrt(noiseVar))
weighedX = sweep(x = X, 2, betas, "*")
sumWeighedX = rowSums(weighedX)
Y = sumWeighedX + noise
return(Y)
}
generateNetwork = function(transFactorsCount, regulatedGenesPerTF){
network = matrix(0, transFactorsCount * regulatedGenesPerTF, 2)
for(i in 0:transFactorsCount-1){
for(j in 1:regulatedGenesPerTF){
network[i * regulatedGenesPerTF + j, 1] = i * (regulatedGenesPerTF + 1) + 1
network[i * regulatedGenesPerTF + j, 2] = i * (regulatedGenesPerTF + 1) + j + 1
}
}
return(network)
}
normalize = function(X, Y){
Xmu<-apply(X, 2, mean)
Xsd<-sqrt(apply(X, 2, var))
for(i in 1:length(X)){
X[,i] = (X[,i] - Xmu[i])/Xsd[i]
}
for(i in 1:length(Y)){
Y[,i] = Y[,i] - mean(Y[,i])
}
return(list(x = X, y = Y))
}
generateAndNormalize = function(n, transFactorCount, regulatedGenesPerTF){
betas = createBetaFrame()
network = generateNetwork(transFactorsCount, regulatedGenesPerTF)
X = generateExpressionLevelsFrame(n, transFactorsCount, regulatedGenesPerTF)
Y = data.frame(cbind(simulateResponseValues(X, betas[1,]), simulateResponseValues(X, betas[2,]),
simulateResponseValues(X, betas[3,]), simulateResponseValues(X, betas[4,])))
normalized = normalize(X, Y)
return(list(x = normalized[[1]], y = normalized[[2]], net = network))
}
generated = generateAndNormalize(n = 100, transFactorCount = 200, regulatedGenesPerTF = 10)
generateAndNormalize = function(n, transFactorsCount, regulatedGenesPerTF){
betas = createBetaFrame()
network = generateNetwork(transFactorsCount, regulatedGenesPerTF)
X = generateExpressionLevelsFrame(n, transFactorsCount, regulatedGenesPerTF)
Y = data.frame(cbind(simulateResponseValues(X, betas[1,]), simulateResponseValues(X, betas[2,]),
simulateResponseValues(X, betas[3,]), simulateResponseValues(X, betas[4,])))
normalized = normalize(X, Y)
return(list(x = normalized[[1]], y = normalized[[2]], net = network))
}
generated = generateAndNormalize(n = 100, transFactorsCount = 200, regulatedGenesPerTF = 10)
X = generated[[1]]
Y = generated[[2]]
network = generated[[3]]
nTF<-10
gamma0<-0
Ntr<-50
Ntu<-50
Nts<-200
nTarget<-10
wt<-rep(c(nTarget, rep(1, nTarget)), nTF)^((gamma0+1)/2) # wt = (d_i)^((gamma0+1)/2) ==> w_i = d_i^(1/2)
wtinf<-rep(c(nTarget, rep(1, nTarget)), nTF)^(0.5) # wt = (d_i)^((gamma0+1)/2) ==> w_i = d_i^(1/2)
generateAndNormalize = function(n, transFactorsCount, regulatedGenesPerTF){
betas = createBetaFrame()
network = generateNetwork(transFactorsCount, regulatedGenesPerTF)
gamma = 0
weights<-rep(c(regulatedGenesPerTF, rep(1, regulatedGenesPerTF)), transFactorsCount)^((gamma+1)/2)
X = generateExpressionLevelsFrame(n, transFactorsCount, regulatedGenesPerTF)
Y = data.frame(cbind(simulateResponseValues(X, betas[1,]), simulateResponseValues(X, betas[2,]),
simulateResponseValues(X, betas[3,]), simulateResponseValues(X, betas[4,])))
normalized = normalize(X, Y)
return(list(x = normalized[[1]], y = normalized[[2]], net = network, wt = weights))
}
weights = generated[[4]]
generated = generateAndNormalize(n = 100, transFactorsCount = 200, regulatedGenesPerTF = 10)
X = generated[[1]]
Y = generated[[2]]
network = generated[[3]]
weights = generated[[4]]
generateAndNormalize = function(n, transFactorsCount, regulatedGenesPerTF){
set.seed(0)
betas = createBetaFrame()
network = generateNetwork(transFactorsCount, regulatedGenesPerTF)
gamma = 0
weights<-rep(c(regulatedGenesPerTF, rep(1, regulatedGenesPerTF)), transFactorsCount)^((gamma+1)/2)
X = generateExpressionLevelsFrame(n, transFactorsCount, regulatedGenesPerTF)
Y = data.frame(cbind(simulateResponseValues(X, betas[1,]), simulateResponseValues(X, betas[2,]),
simulateResponseValues(X, betas[3,]), simulateResponseValues(X, betas[4,])))
normalized = normalize(X, Y)
return(list(x = normalized[[1]], y = normalized[[2]], net = network, wt = weights))
}
generated = generateAndNormalize(n = 100, transFactorsCount = 200, regulatedGenesPerTF = 10)
X = generated[[1]]
Y = generated[[2]]
network = generated[[3]]
weights = generated[[4]]
generateBetaVector = function(TF1, TF2, TF3, TF4, denominator, negative, positive, unrelatedTransFactorCount){
EL1 = c(TF1, rep(-TF1/denominator, negative), rep(TF1/denominator, positive))
EL2 = c(TF2, rep(-TF2/denominator, negative), rep(TF2/denominator, positive))
EL3 = c(TF3, rep(-TF3/denominator, negative), rep(TF3/denominator, positive))
EL4 = c(TF4, rep(-TF4/denominator, negative), rep(TF4/denominator, positive))
ELU = rep(0, unrelatedTransFactorCount*(1+positive+negative))
return(c(EL1, EL2, EL3, EL4, ELU))
}
createBetaFrame = function(){
M1 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = sqrt(10), negative = 0, positive = 10, unrelatedTransFactorCount = 196)
M2 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = sqrt(10), negative = 3, positive = 7, unrelatedTransFactorCount = 196)
M3 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = 10, negative = 0, positive = 10, unrelatedTransFactorCount = 196)
M4 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = 10, negative = 3, positive = 7, unrelatedTransFactorCount = 196)
betas = data.frame(rbind(M1,M2,M3,M4))
return(betas)
}
generateExpressionLevels = function(transFactorsCount, regulatedGenesPerTF){
TF = rnorm(n = transFactorsCount, mean = 0, sd = 1)
expressionLevels = c()
for(i in 1:length(TF)){
expressionLevels = c(expressionLevels, TF[i], rnorm(regulatedGenesPerTF, 0.7*TF[i], 0.51)) # sqrt(0.51)
}
return(expressionLevels)
}
generateExpressionLevelsFrame = function(n, transFactorsCount, regulatedGenesPerTF){
expressionLevelsFrame = c()
for(i in 1:n){
expressionLevelsFrame = rbind(expressionLevelsFrame, generateExpressionLevels(transFactorsCount, regulatedGenesPerTF))
}
return(data.frame(expressionLevelsFrame))
}
simulateResponseValues = function(X, betas){
betas = as.numeric(betas)
noiseVar = sum((betas-mean(betas))^2)/4 # 2?
noise = rnorm(nrow(X), mean = 0, sd = sqrt(noiseVar))
weighedX = sweep(x = X, 2, betas, "*")
sumWeighedX = rowSums(weighedX)
Y = sumWeighedX + noise
return(Y)
}
generateNetwork = function(transFactorsCount, regulatedGenesPerTF){
network = matrix(0, transFactorsCount * regulatedGenesPerTF, 2)
for(i in 0:transFactorsCount-1){
for(j in 1:regulatedGenesPerTF){
network[i * regulatedGenesPerTF + j, 1] = i * (regulatedGenesPerTF + 1) + 1
network[i * regulatedGenesPerTF + j, 2] = i * (regulatedGenesPerTF + 1) + j + 1
}
}
return(network)
}
normalize = function(X, Y){
Xmu<-apply(X, 2, mean)
Xsd<-sqrt(apply(X, 2, var))
for(i in 1:length(X)){
X[,i] = (X[,i] - Xmu[i])/Xsd[i]
}
for(i in 1:length(Y)){
Y[,i] = Y[,i] - mean(Y[,i])
}
return(list(x = X, y = Y))
}
generateAndNormalize = function(n, transFactorsCount, regulatedGenesPerTF){
set.seed(0)
betas = createBetaFrame()
network = generateNetwork(transFactorsCount, regulatedGenesPerTF)
gamma = 0
weights<-rep(c(regulatedGenesPerTF, rep(1, regulatedGenesPerTF)), transFactorsCount)^((gamma+1)/2)
X = generateExpressionLevelsFrame(n, transFactorsCount, regulatedGenesPerTF)
Y = data.frame(cbind(simulateResponseValues(X, betas[1,]), simulateResponseValues(X, betas[2,]),
simulateResponseValues(X, betas[3,]), simulateResponseValues(X, betas[4,])))
normalized = normalize(X, Y)
return(list(x = normalized[[1]], y = normalized[[2]], net = network, wt = weights))
}
generated = generateAndNormalize(n = 100, transFactorsCount = 200, regulatedGenesPerTF = 10)
X = generated[[1]]
Y = generated[[2]]
network = generated[[3]]
weights = generated[[4]]
View(X)
generateBetaVector = function(TF1, TF2, TF3, TF4, denominator, negative, positive, unrelatedTransFactorCount){
EL1 = c(TF1, rep(-TF1/denominator, negative), rep(TF1/denominator, positive))
EL2 = c(TF2, rep(-TF2/denominator, negative), rep(TF2/denominator, positive))
EL3 = c(TF3, rep(-TF3/denominator, negative), rep(TF3/denominator, positive))
EL4 = c(TF4, rep(-TF4/denominator, negative), rep(TF4/denominator, positive))
ELU = rep(0, unrelatedTransFactorCount*(1+positive+negative))
return(c(EL1, EL2, EL3, EL4, ELU))
}
createBetaFrame = function(){
M1 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = sqrt(10), negative = 0, positive = 10, unrelatedTransFactorCount = 196)
M2 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = sqrt(10), negative = 3, positive = 7, unrelatedTransFactorCount = 196)
M3 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = 10, negative = 0, positive = 10, unrelatedTransFactorCount = 196)
M4 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = 10, negative = 3, positive = 7, unrelatedTransFactorCount = 196)
betas = data.frame(rbind(M1,M2,M3,M4))
return(betas)
}
generateExpressionLevels = function(transFactorsCount, regulatedGenesPerTF){
TF = rnorm(n = transFactorsCount, mean = 0, sd = 1)
expressionLevels = c()
for(i in 1:length(TF)){
expressionLevels = c(expressionLevels, TF[i], rnorm(regulatedGenesPerTF, 0.7*TF[i], sqrt(0.51)))
}
return(expressionLevels)
}
generateExpressionLevelsFrame = function(n, transFactorsCount, regulatedGenesPerTF){
expressionLevelsFrame = c()
for(i in 1:n){
expressionLevelsFrame = rbind(expressionLevelsFrame, generateExpressionLevels(transFactorsCount, regulatedGenesPerTF))
}
return(data.frame(expressionLevelsFrame))
}
simulateResponseValues = function(X, betas){
betas = as.numeric(betas)
noiseVar = sum((betas-mean(betas))^2)/4
noise = rnorm(nrow(X), mean = 0, sd = sqrt(noiseVar))
weighedX = sweep(x = X, 2, betas, "*")
sumWeighedX = rowSums(weighedX)
Y = sumWeighedX + noise
return(Y)
}
generateNetwork = function(transFactorsCount, regulatedGenesPerTF){
network = matrix(0, transFactorsCount * regulatedGenesPerTF, 2)
for(i in 0:transFactorsCount-1){
for(j in 1:regulatedGenesPerTF){
network[i * regulatedGenesPerTF + j, 1] = i * (regulatedGenesPerTF + 1) + 1
network[i * regulatedGenesPerTF + j, 2] = i * (regulatedGenesPerTF + 1) + j + 1
}
}
return(network)
}
normalize = function(X, Y){
Xmu<-apply(X, 2, mean)
Xsd<-sqrt(apply(X, 2, var))
for(i in 1:length(X)){
X[,i] = (X[,i] - Xmu[i])/Xsd[i]
}
for(i in 1:length(Y)){
Y[,i] = Y[,i] - mean(Y[,i])
}
return(list(x = X, y = Y))
}
generateAndNormalize = function(n, transFactorsCount, regulatedGenesPerTF){
set.seed(0)
betas = createBetaFrame()
network = generateNetwork(transFactorsCount, regulatedGenesPerTF)
gamma = 0
weights<-rep(c(regulatedGenesPerTF, rep(1, regulatedGenesPerTF)), transFactorsCount)^((gamma+1)/2)
X = generateExpressionLevelsFrame(n, transFactorsCount, regulatedGenesPerTF)
Y = data.frame(cbind(simulateResponseValues(X, betas[1,]), simulateResponseValues(X, betas[2,]),
simulateResponseValues(X, betas[3,]), simulateResponseValues(X, betas[4,])))
normalized = normalize(X, Y)
return(list(x = normalized[[1]], y = normalized[[2]], net = network, wt = weights))
}
generated = generateAndNormalize(n = 100, transFactorsCount = 200, regulatedGenesPerTF = 10)
X = generated[[1]]
Y = generated[[2]]
network = generated[[3]]
weights = generated[[4]]
View(Y)
View(Y)
