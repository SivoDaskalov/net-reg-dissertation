gamma = 0
degrees<-rep(c(regulatedGenesPerTF, rep(1, regulatedGenesPerTF)), transFactorsCount)^((gamma+1)/2)
p = transFactorsCount * ( 1 + regulatedGenesPerTF)
L = matrix(0, p, p)
for(i in 1:nrow(network)){
# w(u,v) assumed to be 1
u = network[i,1]
v = network[i,2]
if(u == v){
L[u,v] = 1 - 1/degrees[u]
} else{
L[u,v] = - 1/sqrt(degrees[u]*degrees[v])
L[v,u] = - 1/sqrt(degrees[u]*degrees[v])
}
}
return(L)
}
normalize = function(X, Y){
Xmu<-apply(X, 2, mean)
Xsd<-sqrt(apply(X, 2, var))
for(i in 1:length(X)){
X[,i] = (X[,i] - Xmu[i])/Xsd[i]
}
for(i in 1:length(Y)){
Y[,i] = Y[,i] - mean(Y[,i])
}
return(list(x = X, y = Y))
}
generateAndNormalize = function(n, transFactorsCount, regulatedGenesPerTF){
set.seed(0)
betas = createBetaFrame()
L = generateNetwork(transFactorsCount, regulatedGenesPerTF)
X = generateExpressionLevelsFrame(n, transFactorsCount, regulatedGenesPerTF)
Y = data.frame(cbind(simulateResponseValues(X, betas[1,]), simulateResponseValues(X, betas[2,]),
simulateResponseValues(X, betas[3,]), simulateResponseValues(X, betas[4,])))
normalized = normalize(X, Y)
return(list(x = normalized[[1]], y = normalized[[2]], net = network, dg = degrees))
}
generateAndNormalize = function(n, transFactorsCount, regulatedGenesPerTF){
set.seed(0)
betas = createBetaFrame()
L = generateNetwork(transFactorsCount, regulatedGenesPerTF)
X = generateExpressionLevelsFrame(n, transFactorsCount, regulatedGenesPerTF)
Y = data.frame(cbind(simulateResponseValues(X, betas[1,]), simulateResponseValues(X, betas[2,]),
simulateResponseValues(X, betas[3,]), simulateResponseValues(X, betas[4,])))
normalized = normalize(X, Y)
return(list(x = normalized[[1]], y = normalized[[2]], l = L))
}
generateBetaVector = function(TF1, TF2, TF3, TF4, denominator, negative, positive, unrelatedTransFactorCount){
EL1 = c(TF1, rep(-TF1/denominator, negative), rep(TF1/denominator, positive))
EL2 = c(TF2, rep(-TF2/denominator, negative), rep(TF2/denominator, positive))
EL3 = c(TF3, rep(-TF3/denominator, negative), rep(TF3/denominator, positive))
EL4 = c(TF4, rep(-TF4/denominator, negative), rep(TF4/denominator, positive))
ELU = rep(0, unrelatedTransFactorCount*(1+positive+negative))
return(c(EL1, EL2, EL3, EL4, ELU))
}
createBetaFrame = function(){
M1 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = sqrt(10), negative = 0, positive = 10, unrelatedTransFactorCount = 196)
M2 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = sqrt(10), negative = 3, positive = 7, unrelatedTransFactorCount = 196)
M3 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = 10, negative = 0, positive = 10, unrelatedTransFactorCount = 196)
M4 = generateBetaVector(TF1 = 5, TF2 = -5, TF3 = 3, TF4 = -3, denominator = 10, negative = 3, positive = 7, unrelatedTransFactorCount = 196)
betas = data.frame(rbind(M1,M2,M3,M4))
return(betas)
}
generateExpressionLevels = function(transFactorsCount, regulatedGenesPerTF){
TF = rnorm(n = transFactorsCount, mean = 0, sd = 1)
expressionLevels = c()
for(i in 1:length(TF)){
expressionLevels = c(expressionLevels, TF[i], rnorm(regulatedGenesPerTF, 0.7*TF[i], sqrt(0.51)))
}
return(expressionLevels)
}
generateExpressionLevelsFrame = function(n, transFactorsCount, regulatedGenesPerTF){
expressionLevelsFrame = c()
for(i in 1:n){
expressionLevelsFrame = rbind(expressionLevelsFrame, generateExpressionLevels(transFactorsCount, regulatedGenesPerTF))
}
return(data.frame(expressionLevelsFrame))
}
simulateResponseValues = function(X, betas){
betas = as.numeric(betas)
noiseVar = sum((betas-mean(betas))^2)/4
noise = rnorm(nrow(X), mean = 0, sd = sqrt(noiseVar))
weighedX = sweep(x = X, 2, betas, "*")
sumWeighedX = rowSums(weighedX)
Y = sumWeighedX + noise
return(Y)
}
generateNetwork = function(transFactorsCount, regulatedGenesPerTF){
network = matrix(0, transFactorsCount * regulatedGenesPerTF, 2)
for(i in 0:transFactorsCount-1){
for(j in 1:regulatedGenesPerTF){
network[i * regulatedGenesPerTF + j, 1] = i * (regulatedGenesPerTF + 1) + 1
network[i * regulatedGenesPerTF + j, 2] = i * (regulatedGenesPerTF + 1) + j + 1
}
}
gamma = 0
degrees<-rep(c(regulatedGenesPerTF, rep(1, regulatedGenesPerTF)), transFactorsCount)^((gamma+1)/2)
p = transFactorsCount * ( 1 + regulatedGenesPerTF)
L = matrix(0, p, p)
for(i in 1:nrow(network)){
# w(u,v) assumed to be 1
u = network[i,1]
v = network[i,2]
if(u == v){
L[u,v] = 1 - 1/degrees[u]
} else{
L[u,v] = - 1/sqrt(degrees[u]*degrees[v])
L[v,u] = - 1/sqrt(degrees[u]*degrees[v])
}
}
return(L)
}
normalize = function(X, Y){
Xmu<-apply(X, 2, mean)
Xsd<-sqrt(apply(X, 2, var))
for(i in 1:length(X)){
X[,i] = (X[,i] - Xmu[i])/Xsd[i]
}
for(i in 1:length(Y)){
Y[,i] = Y[,i] - mean(Y[,i])
}
return(list(x = X, y = Y))
}
generateAndNormalize = function(n, transFactorsCount, regulatedGenesPerTF){
set.seed(0)
betas = createBetaFrame()
L = generateNetwork(transFactorsCount, regulatedGenesPerTF)
X = generateExpressionLevelsFrame(n, transFactorsCount, regulatedGenesPerTF)
Y = data.frame(cbind(simulateResponseValues(X, betas[1,]), simulateResponseValues(X, betas[2,]),
simulateResponseValues(X, betas[3,]), simulateResponseValues(X, betas[4,])))
normalized = normalize(X, Y)
return(list(x = normalized[[1]], y = normalized[[2]], l = L))
}
generated = generateAndNormalize(n = 100, transFactorsCount = 200, regulatedGenesPerTF = 10)
X = generated[[1]]
Y = generated[[2]]
L = generated[[3]]
View(L)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("dataset_tools.R")
source("grace.R")
n = 100
transFactorsCount = 20
regulatedGenesPerTF = 10
set.seed(0)
training = generateAndNormalize(n, transFactorsCount, regulatedGenesPerTF)
generateAndNormalize = function(n, transFactorsCount, regulatedGenesPerTF){
betas = createBetaFrame(transFactorsCount, regulatedGenesPerTF)
L = generateNetwork(transFactorsCount, regulatedGenesPerTF)
X = generateExpressionLevelsFrame(n, transFactorsCount, regulatedGenesPerTF)
Y = data.frame(cbind(simulateResponseValues(X, betas[1,]), simulateResponseValues(X, betas[2,]),
simulateResponseValues(X, betas[3,]), simulateResponseValues(X, betas[4,])))
normalized = normalize(X, Y)
return(list(x = normalized$s, y = normalized$y, l = L, betas = betas))
}
training = generateAndNormalize(n, transFactorsCount, regulatedGenesPerTF)
generateObservation = function(transFactorsCount, regulatedGenesPerTF){
TF = rnorm(n = transFactorsCount, mean = 0, sd = 1)
observation = c()
for(i in 1:length(TF)){
observation = c(observation, TF[i], rnorm(regulatedGenesPerTF, 0.7*TF[i], sqrt(0.51)))
}
return(observation)
}
training = generateAndNormalize(n, transFactorsCount, regulatedGenesPerTF)
source("dataset_tools.R")
source("dataset_tools.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("dataset_tools.R")
source("evaluation_tools.R")
source("grace.R")
n = 100
transFactorsCount = 20
regulatedGenesPerTF = 10
set.seed(0)
training = generateAndNormalize(n, transFactorsCount, regulatedGenesPerTF)
training = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("dataset_tools.R")
source("evaluation_tools.R")
source("grace.R")
n = 100
transFactorsCount = 20
regulatedGenesPerTF = 10
set.seed(0)
training = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
generateDataset = function(n, transFactorsCount, regulatedGenesPerTF){
betas = datasetTools$createBetaFrame(transFactorsCount, regulatedGenesPerTF)
L = datasetTools$generateNetwork(transFactorsCount, regulatedGenesPerTF)
X = datasetTools$generateExpressionLevelsFrame(n, transFactorsCount, regulatedGenesPerTF)
Y = data.frame(cbind(datasetTools$simulateResponseValues(X, betas[1,]), datasetTools$simulateResponseValues(X, betas[2,]),
datasetTools$simulateResponseValues(X, betas[3,]), datasetTools$simulateResponseValues(X, betas[4,])))
normalized = datasetTools$normalize(X, Y)
return(list(x = normalized$s, y = normalized$y, l = L, betas = betas))
}
training = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
generateDataset = function(n, transFactorsCount, regulatedGenesPerTF){
betas = datasetTools$createBetaFrame(transFactorsCount, regulatedGenesPerTF)
L = datasetTools$generateNetwork(transFactorsCount, regulatedGenesPerTF)
X = datasetTools$generateExpressionLevelsFrame(n, transFactorsCount, regulatedGenesPerTF)
Y = data.frame(cbind(datasetTools$simulateResponseValues(X, betas[1,]), datasetTools$simulateResponseValues(X, betas[2,]),
datasetTools$simulateResponseValues(X, betas[3,]), datasetTools$simulateResponseValues(X, betas[4,])))
normalized = datasetTools$normalize(X, Y)
return(list(x = normalized$x, y = normalized$y, l = L, betas = betas))
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("dataset_tools.R")
source("evaluation_tools.R")
source("grace.R")
n = 100
transFactorsCount = 20
regulatedGenesPerTF = 10
set.seed(0)
training = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Xtr = training$x[[1]]
Ytr = training[[2]]
L = training[[3]]
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("dataset_tools.R")
source("grace.R")
n = 100
transFactorsCount = 20
regulatedGenesPerTF = 10
set.seed(0)
training = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Xtr = training$x[[1]]
Ytr = training[[2]]
L = training[[3]]
tuning = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Xtu = tuning[[1]]
Ytu = tuning[[2]]
test = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Xts = test[[1]]
Yts = test[[2]]
Betasts = test[[4]]
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("dataset_tools.R")
source("grace.R")
n = 100
transFactorsCount = 20
regulatedGenesPerTF = 10
set.seed(0)
training = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Xtr = training$x[[1]]
Ytr = training[[2]]
L = training[[3]]
Xtu = tuning[[1]]
tuning = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Ytu = tuning[[2]]
test = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Xts = test[[1]]
Yts = test[[2]]
Betas = test[[4]]
lambdaGrid = 10 ^ seq(from = -2, by = 1, length = 6)
grace = grace(Ytr[,1], Xtr, Ytu[,1], Xtu, L, lambdaGrid, lambdaGrid, lambdaGrid, K = 10)
View(L)
tuning = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Xtu = tuning[[1]]
Ytu = tuning[[2]]
test = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Xts = test[[1]]
Yts = test[[2]]
Betas = test[[4]]
lambdaGrid = 10 ^ seq(from = -2, by = 1, length = 6)
grace = grace(Ytr[,1], Xtr, Ytu[,1], Xtu, L, lambdaGrid, lambdaGrid, lambdaGrid, K = 10)
training = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Xtr = training$x[[1]]
Ytr = training[[2]]
L = training[[3]]
Xtr = training$x
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("dataset_tools.R")
source("grace.R")
n = 100
transFactorsCount = 20
regulatedGenesPerTF = 10
set.seed(0)
training = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Xtr = training$x
Ytr = training$y
tuning = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Xtu = tuning$x
Ytu = tuning$y
test = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Xts = test$x
Yts = test$y
L = test$l
Betas = test$betas
lambdaGrid = 10 ^ seq(from = -2, by = 1, length = 6)
grace = grace(Ytr[,1], Xtr, Ytu[,1], Xtu, L, lambdaGrid, lambdaGrid, lambdaGrid, K = 10)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("dataset_tools.R")
source("grace.R")
n = 100
transFactorsCount = 20
regulatedGenesPerTF = 10
set.seed(0)
training = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
source("dataset_tools.R")
source("dataset_tools.R")
source("grace.R")
n = 100
transFactorsCount = 20
regulatedGenesPerTF = 10
set.seed(0)
training = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
L = generateNetwork(transFactorsCount, regulatedGenesPerTF)
Betas = generateBetas(transFactorsCount, regulatedGenesPerTF)
Ytr = simulateResponse(Xtr, betas[1,])
source("dataset_tools.R")
source("grace.R")
n = 100
transFactorsCount = 20
regulatedGenesPerTF = 10
set.seed(0)
L = generateNetwork(transFactorsCount, regulatedGenesPerTF)
Betas = generateBetas(transFactorsCount, regulatedGenesPerTF)
Xtr = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Ytr = simulateResponse(Xtr, Betas[1,])
length(betas)
length(Betas)
rows(Betas)
nrow(Betas)
source("dataset_tools.R")
source("evaluation_tools.R")
source("grace.R")
n = 100
transFactorsCount = 20
regulatedGenesPerTF = 10
set.seed(0)
L = generateNetwork(transFactorsCount, regulatedGenesPerTF)
Betas = generateBetas(transFactorsCount, regulatedGenesPerTF)
Xtr = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Ytr = simulateResponse(Xtr, Betas[1,])
simulateResponse = function(X, betas){
Y = c()
for(i in 1:nrow(betas)){
Y = rbind(Y, dataTools$simulateResponseVector(X, betas[i,]))
}
# Normalize
for(i in 1:length(Y)){
Y[,i] = Y[,i] - mean(Y[,i])
}
return(data.frame(Y))
}
Ytu = tuning$y
Ytr = simulateResponse(Xtr, Betas[1,])
Ytr = simulateResponse(Xtr, Betas)
Ytr = simulateResponse(Xtr, Betas)
Y = c()
for(i in 1:nrow(Betas)){
Y = rbind(Y, dataTools$simulateResponseVector(X, Betas[i,]))
}
for(i in 1:nrow(Betas)){
Y = rbind(Y, dataTools$simulateResponseVector(Xtr, Betas[i,]))
}
for(i in 1:length(Y)){
Y[,i] = Y[,i] - mean(Y[,i])
}
length(Y)
Y = data.frame(Y)
length(Y)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("dataset_tools.R")
source("evaluation_tools.R")
source("grace.R")
n = 100
transFactorsCount = 20
regulatedGenesPerTF = 10
set.seed(0)
L = generateNetwork(transFactorsCount, regulatedGenesPerTF)
Betas = generateBetas(transFactorsCount, regulatedGenesPerTF)
Xtr = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Ytr = simulateResponse(Xtr, Betas)
Xtu = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Ytu = simulateResponse(Xtu, Betas)
Xts = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Yts = simulateResponse(Xts, Betas)
lambdaGrid = 10 ^ seq(from = -2, by = 1, length = 6)
grace = grace(Ytr[,1], Xtr, Ytu[,1], Xtu, L, lambdaGrid, lambdaGrid, lambdaGrid, K = 10)
simulateResponse = function(X, betas){
Y = c()
for(i in 1:nrow(betas)){
Y = cbind(Y, dataTools$simulateResponseVector(X, betas[i,]))
}
# Normalize
Y = data.frame(Y)
for(i in 1:length(Y)){
Y[,i] = Y[,i] - mean(Y[,i])
}
return(Y)
}
Ytr = simulateResponse(Xtr, Betas)
Ytu = simulateResponse(Xtu, Betas)
Yts = simulateResponse(Xts, Betas)
grace = grace(Ytr[,1], Xtr, Ytu[,1], Xtu, L, lambdaGrid, lambdaGrid, lambdaGrid, K = 10)
grace$parameters$parameterMin
grace$coefficients
cor(x = grace$coefficients, y = Betas[1,])
cor(x = as.numeric(grace$coefficients), y = Betas[1,])
cor(x = as.numeric(grace$coefficients), y = as.numeric(Betas[1,]))
as.numeric(grace$coefficients)
grace$coefficients
grace$coefficients[1,]
grace$coefficients[1]
unlist(grace$coefficients)
unlist(grace$coefficients$beta)
as.numeric(unlist(grace$coefficients$beta))
trueBeta = as.numeric(Betas[1,])
betaHat = as.numeric(unlist(grace$coefficients$beta))
cor(x = as.numeric(grace$coefficients), y = as.numeric(Betas[1,]))
cor(x = betaHat, y = trueBeta)
cor(x = c(1,2,3,4,5), y = c(0.1, 0.2, 0.3, 0.4, 0.5))
trueBetas = 1:50
trueBetaIndices = 1:50
trueBetaIndices = 1:4*(1+regulatedGenesPerTF)
trueBetaIndices = 1:(4*(1+regulatedGenesPerTF))
sens = sum(coefs[1:trueBetas] != 0) / trueBetas
prediction <- predict(object=grace$fit, as.matrix(Xts), type="response")
mse = mean((prediction - Yts[,1])^2)
coefs = grace$coefficients$beta
trueBetas = 4 * (1 + regulatedGenesPerTF)
sens = sum(coefs[1:trueBetas] != 0) / trueBetas
spec = sum(coefs[trueBetas+1:(length(coefs)-trueBetas)] == 0) / (length(coefs) - trueBetas)
grace$parameters$parameterMin
grace$coefficients
sens = sum(betaHat[trueBetaIndices] != 0) / length(trueBetaIndices)
sens = sum(coefs[1:trueBetas] != 0) / trueBetas
sensa = sum(betaHat[trueBetaIndices] != 0) / length(trueBetaIndices)
help(":")
length(trueBetaIndices)+1
(length(trueBetaIndices)-trueBetas)]
(length(trueBetaIndices)-trueBetas)
length(trueBetaIndices)
length(betaHat)
spe = sum(betaHat[length(trueBetaIndices)+1:length(betaHat)] == 0) / (length(betaHat) - length(trueBetaIndices))
(length(betaHat) - length(trueBetaIndices))
sum(betaHat[length(trueBetaIndices)+1:length(betaHat)] == 0)
betaHat[length(trueBetaIndices)+1:length(betaHat)]
betaHat[length(trueBetaIndices)+1:220]
betaHat[length(trueBetaIndices)+1:length(betaHat) - length(trueBetaIndices)]
betaHat[length(trueBetaIndices)+1:(length(betaHat) - length(trueBetaIndices))]
betaHat[(length(trueBetaIndices)+1):(length(betaHat) - length(trueBetaIndices))]
betaHat[(length(trueBetaIndices)+1):(length(betaHat))]
asd =betaHat[(length(trueBetaIndices)+1):(length(betaHat))]
spe = sum(betaHat[(length(trueBetaIndices)+1):(length(betaHat))] == 0) / (length(betaHat) - length(trueBetaIndices))
prec =
sum(betaHat[trueBetaIndices] != 0)
grace$coefficients
sum(betaHat != 0)
sum(betaHat != 0)
sum(betaHat[trueBetaIndices] != 0)
sum(betaHat != 0)
source('~/GitHub/dissertation/main.R', echo=TRUE)
prec = sum(betaHat[trueBetaIndices] != 0) / sum(betaHat != 0)
evalStatistics = function(trueBeta, betaHat, trueBetaIndices){
if(missing(trueBetaIndices)) {
# Assume beta model as defined in Li and Li 2008
trueTransFactors = 4
genesPerFactor = 10
trueBetaIndices = 1:(trueTransFactors*(1+genesPerFactor))
}
correlation = cor(x = betaHat, y = trueBeta)
sensitivity = sum(betaHat[trueBetaIndices] != 0) / length(trueBetaIndices)
specificity = sum(betaHat[(length(trueBetaIndices) + 1) : (length(betaHat))] == 0) / (length(betaHat) - length(trueBetaIndices))
precision = sum(betaHat[trueBetaIndices] != 0) / sum(betaHat != 0)
return(list(sensitivity,specificity,precision,correlation))
}
evalStatistics(trueBeta = as.numeric(Betas[1,]), betaHat = as.numeric(unlist(grace$coefficients$beta)))
evalStatistics = function(trueBeta, betaHat, trueBetaIndices){
if(missing(trueBetaIndices)) {
# Assume beta model as defined in Li and Li 2008
trueTransFactors = 4
genesPerFactor = 10
trueBetaIndices = 1:(trueTransFactors*(1+genesPerFactor))
}
correlation = cor(x = betaHat, y = trueBeta)
sensitivity = sum(betaHat[trueBetaIndices] != 0) / length(trueBetaIndices)
specificity = sum(betaHat[(length(trueBetaIndices) + 1) : (length(betaHat))] == 0) / (length(betaHat) - length(trueBetaIndices))
precision = sum(betaHat[trueBetaIndices] != 0) / sum(betaHat != 0)
return(list(sens = sensitivity, spec = specificity, prec = precision, cor = correlation))
}
evalStatistics(trueBeta = as.numeric(Betas[1,]), betaHat = as.numeric(unlist(grace$coefficients$beta)))
evalStatistics(trueBeta = as.numeric(Betas[1,]), betaHat = as.numeric(unlist(grace$coefficients$beta)), trueBetaIndices = trueBetaIndices)
evalStatistics(trueBeta = as.numeric(Betas[1,]), betaHat = as.numeric(unlist(grace$coefficients$beta)), trueBetaIndices = trueBetaIndices)
evalStatistics(trueBeta = as.numeric(Betas[1,]), betaHat = as.numeric(unlist(grace$coefficients$beta)), trueBetaIndices = trueBetaIndices)
evalStatistics(trueBeta = as.numeric(Betas[1,]), betaHat = as.numeric(unlist(grace$coefficients$beta)))
mse = mean((prediction - Yts[,1])^2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("dataset_tools.R")
source("evaluation_tools.R")
source("grace.R")
n = 100
transFactorsCount = 20
regulatedGenesPerTF = 10
set.seed(0)
L = generateNetwork(transFactorsCount, regulatedGenesPerTF)
Betas = generateBetas(transFactorsCount, regulatedGenesPerTF)
Xtr = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Ytr = simulateResponse(Xtr, Betas)
Xtu = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Ytu = simulateResponse(Xtu, Betas)
Xts = generateDataset(n, transFactorsCount, regulatedGenesPerTF)
Yts = simulateResponse(Xts, Betas)
lambdaGrid = 10 ^ seq(from = -2, by = 1, length = 6)
grace = grace(Ytr[,1], Xtr, Ytu[,1], Xtu, L, lambdaGrid, lambdaGrid, lambdaGrid, K = 10)
prediction <- predict(object=grace$fit, as.matrix(Xts), type="response")
mse = mean((prediction - Yts[,1])^2)
betaHat = as.numeric(unlist(grace$coefficients$beta))
trueBeta = as.numeric(Betas[1,])
evalStatistics(trueBeta = as.numeric(Betas[1,]), betaHat = as.numeric(unlist(grace$coefficients$beta)))
